* Tackling Advent of Code 2020 in emacs lisp

[TABLE-OF-CONTENTS]

** Resources

[[https://adventofcode.com][Advent of code]]

*** Utility functions

**** Read data

Utility functions for loading the input data.  ~read-lines~ adapted from an
example by [[http://ergoemacs.org/emacs/elisp_read_file_content.html][Xah Lee]].

    #+begin_src emacs-lisp
	  (defun read-lines (filePath)
	    "Return a list of lines of a file at filePath."
	    (with-temp-buffer
	      (insert-file-contents filePath)
	      (split-string (buffer-string) "\n" t)))

	  (defun line-to-numbers (line)
	    "Convert a whitespace separated list of strings into numbers"
	    (apply 'string-to-number
		    (split-string line))
	    )

	  (defun read-numbers (filePath)
	    "Return a list of all the numbers in a file at filePath."
	    (let (
		  (lines (read-lines filePath))
		  )
		 (mapcar 'line-to-numbers lines))
	    )
    #+end_src

    #+RESULTS:
    : read-numbers

** Day 01

[[https://adventofcode.com/2020/day/1][Instructions]]

*** Part 1

**** Requirements

1. Load puzzle input
2. Find which 2 values in puzzle input sum to 2020
3. Return product of those 2 values

**** Load data

     #+begin_src emacs-lisp
       (setq data (read-numbers '"inputs/day1.txt"))
     #+end_src

     #+RESULTS:
     | 997 | 1582 | 1790 | 1798 | 1094 | 1831 | 1879 | 1730 | 1995 | 1702 | 1680 | 1869 | 1964 | 1777 | 1862 | 1928 | 1997 | 1741 | 1604 | 1691 | 1219 | 1458 | 1749 | 1717 | 1786 | 1665 | 1724 | 1998 | 1589 | 1828 | 1953 | 1848 | 1500 | 1590 | 1968 | 1948 | 1323 | 1800 | 1986 | 679 | 1907 | 1916 | 1820 | 1661 | 1479 | 1808 | 1824 | 1825 | 1952 | 1666 | 1541 | 1791 | 1906 | 1638 | 1557 | 1999 | 1710 | 1549 | 1912 | 1974 | 1628 | 1748 | 1411 | 1978 | 1865 | 1932 | 1839 | 1892 | 1981 | 1807 | 357 | 912 | 1443 | 1972 | 1816 | 1890 | 1029 | 1175 | 1522 | 1750 | 2001 | 1655 | 1955 | 1949 | 1660 | 233 | 1891 | 1994 | 1934 | 1908 | 1573 | 1712 | 1622 | 1770 | 1574 | 1778 | 1851 | 2004 | 1818 | 1200 | 1229 | 1110 | 1005 | 1716 | 1765 | 1835 | 1773 | 15 | 1914 | 1833 | 1689 | 1843 | 1718 | 1872 | 390 | 1941 | 1178 | 1670 | 1899 | 1864 | 1913 | 2010 | 1855 | 1797 | 1767 | 1673 | 1657 | 1607 | 1305 | 1341 | 1662 | 1845 | 1980 | 1534 | 1789 | 1876 | 1849 | 1926 | 1958 | 977 | 1709 | 1647 | 1832 | 1785 | 1854 | 1667 | 1679 | 1970 | 1186 | 2000 | 1681 | 1684 | 1614 | 1988 | 1561 | 1594 | 1636 | 1327 | 1696 | 1915 | 1045 | 1829 | 1079 | 1295 | 1213 | 1714 | 1992 | 1984 | 1951 | 1687 | 1842 | 1792 | 87 | 1732 | 428 | 1799 | 1850 | 1962 | 1629 | 1965 | 1142 | 1040 | 131 | 1844 | 1454 | 1779 | 1369 | 1960 | 1887 | 1725 | 1893 | 1465 | 1676 | 1826 | 1462 | 1408 | 1937 | 1643 | 1069 | 1759 |

**** Processing

Loop over each value, and return the values where ~2020 - value~ is in the
list of all values.  Return those two values (since we'll find both halves in
a pass through the full list).

#+begin_src emacs-lisp
(defun inverse-in-list (sequence item) (if (member (- 2020 item) sequence) t nil))
(setq result (seq-filter (apply-partially 'inverse-in-list data) data))
#+end_src

#+RESULTS:
| 679 | 1341 |

And the final result is the product of those two values:

#+begin_src emacs-lisp
  (setq result_part1 (eval (cons '* result)))
#+end_src

#+RESULTS:
: 910539

I think this approach of inserting the operator into the start of the list,
and then evaluating the list, is the "lisp-ish" way to multiply the list
together.  But I'm not certain there isn't a better method.

*** Part 2

**** Requirements

1. Find product of the three numbers that sum to 2020

**** Processing

Already have processing for 2 numbers that sum to 2020.  Can we loop over each
value in the input data and calculate if two numbers in the input sum to
~(2020 - current loop value)~?

First, can we change ~inverse-in-list~ to use an arbitrary value rather than
2020?
#+begin_src emacs-lisp
  (defun inverse-in-list (sequence item reference) (if (member (- item reference) sequence) t nil))
  (setq result (seq-filter
		(apply-partially 'inverse-in-list data 2020) data))
#+end_src

#+RESULTS:
| 679 | 1341 |

And now loop over each value in the input, and call the new ~inverse-in-list~
with a reference of ~2020 - value~:

#+begin_src emacs-lisp
  (setq result '())
  (dolist (current-data data result)
    (setq interim_result (seq-filter
		  (apply-partially 'inverse-in-list data (- 2020 current-data)) data))
    (if interim_result (push current-data result))
  )
#+end_src

#+RESULTS:
| 131 | 977 | 912 |

In English, the above creates a ~result~ list to accumulate the values we want
to multiply.  Then, for each ~current-data~ in the ~data~ list, we check if
any two values in the list add up to ~(2020 - current-data)~.  If they do, we
accumulate the ~current-data~.  Notice that the third argument of ~do-list~ is
the returned value, in this case the accumulated ~result~.

Finally, a similar multiplication as for part 1:

#+begin_src emacs-lisp
  (setq result_part2 (eval (cons '* result)))
#+end_src

#+RESULTS:
: 116724144

** Day 02

[[https://adventofcode.com/2020/day/2][Instructions]]

*** Part 1

**** Requirements

1. Load puzzle input
2. Count valid passwords in input, where valid password defined as:
   #+begin_quote
suppose you have the following list:

1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc
Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.
   #+end_quote

**** Processing

So let's start with a function to validate a single line:

#+begin_src emacs-lisp
  (defun password-break-line (line)
    "Breaks a line from the day 2 input in to the parts needed for validation"
    (let* (
	   (parts (split-string line))
	   (counts (split-string (elt parts 0) "-")))
    (setq
	   min-count (string-to-number (elt counts 0))
	   max-count (string-to-number (elt counts 1))
	   letter (substring (elt parts 1) 0 1)
	   password (elt parts 2)
	   )
      )
  )

  (defun validate-password (line)
    "Checks if a password is valid according to the day 2 instructions."
    (message line)
    (password-break-line line)
    (let (
	  (letter-count
	   (- (length
	       (split-string password
			     letter
			     )
	       )
	      1)
	   )
	  )
      (setq result (<= min-count letter-count max-count))
    )
    result
    )
  (validate-password "2-9 c: ccccccccc")
#+end_src

#+RESULTS:
: t

And now apply across all lines:

#+begin_src emacs-lisp
    (setq data (read-lines '"inputs/day2.txt"))
    (setq result (seq-filter 'validate-password data))
    (length result)
#+end_src

#+RESULTS:
: 434

Which is the right result for part 1 of day 2 âŒ£
